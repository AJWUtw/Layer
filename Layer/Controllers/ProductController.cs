using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using eSaleModel.Order2;

namespace Layer.Controllers
{
    public class ProductController : Controller
    {
        // GET: api/Product
        public IEnumerable<string> Get()
        {
            return new string[] { "value1", "value2" };
        }

        // GET: api/Product/5
        public string Get(int id)
        {
            return "value";
        }

        // POST: api/Product
        public void Post([FromBody]string value)
        {
        }

        // PUT: api/Product/5
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE: api/Product/5
        public void Delete(int id)
        {
        }


        //start

        //public GridModel Create(IEnumerable<ProductViewModel> products)
        //{
        //    var result = new List<Product>();

        //    using (var northwind = new Northwind())
        //    {
        //        //Iterate all created products which are posted by the Kendo Grid
        //        foreach (var productViewModel in products)
        //        {
        //            // Create a new Product entity and set its properties from productViewModel
        //            var product = new Product
        //            {
        //                ProductName = productViewModel.ProductName,
        //                UnitPrice = productViewModel.UnitPrice,
        //                UnitsInStock = productViewModel.UnitsInStock,
        //                Discontinued = productViewModel.Discontinued
        //            };

        //            // store the product in the result
        //            result.Add(product);

        //            // Add the entity
        //            northwind.Products.AddObject(product);
        //        }

        //        // Insert all created products to the database
        //        northwind.SaveChanges();

        //        // Return the inserted products - the Kendo Grid needs their ProductID which is generated by SQL server during insertion

        //        return new GridModel()
        //        {
        //            Data = result.Select(p => new ProductViewModel
        //            {
        //                ProductID = p.ProductID,
        //                ProductName = p.ProductName,
        //                UnitPrice = p.UnitPrice,
        //                UnitsInStock = p.UnitsInStock,
        //                Discontinued = p.Discontinued
        //            })
        //            .ToList()
        //        };
        //    }
        //}

        /// <summary>
        /// Reads the available products to provide data for the Kendo Grid
        /// </summary>
        /// <returns>All available products</returns>
        public JsonResult Read()
        {
            int take = 20;
            int skip = 0;
            var gridModel = new GridModel();
            try
            {
                var data = new List<ProductViewModel>();
                data.Add(new ProductViewModel()
                {
                    ProductID = 1,
                    ProductName = "Chai",
                    UnitPrice = 18,
                    UnitsInStock = 39,
                    Discontinued = false

                });
                var total = 1;

                gridModel = new GridModel()
                {
                    Data = data.OrderBy(p => p.ProductID).Skip(skip)
                                .Take(take)
                                .ToList(),
                    Total = total
                };


            }
            catch (Exception e)
            {
                var aaa = e;
            }

            return this.Json(gridModel.Data, JsonRequestBehavior.AllowGet);
        }

        ///// <summary>
        ///// Updates existing products by updating the database with the data posted by the Kendo Grid.
        ///// </summary>
        ///// <param name="products">The products updated by the user</param>
        //public void Update(IEnumerable<ProductViewModel> products)
        //{
        //    using (var northwind = new Northwind())
        //    {
        //        //Iterate all updated products which are posted by the Kendo Grid
        //        foreach (var productViewModel in products)
        //        {
        //            // Create a new Product entity and set its properties from productViewModel
        //            var product = new Product
        //            {
        //                ProductID = (int)productViewModel.ProductID,
        //                ProductName = productViewModel.ProductName,
        //                UnitPrice = productViewModel.UnitPrice,
        //                UnitsInStock = productViewModel.UnitsInStock,
        //                Discontinued = productViewModel.Discontinued
        //            };

        //            // Attach the entity
        //            northwind.Products.Attach(product);
        //            // Change its state to Modified so Entity Framework can update the existing product instead of creating a new one
        //            northwind.ObjectStateManager.ChangeObjectState(product, EntityState.Modified);
        //        }

        //        // Save all updated products to the database
        //        northwind.SaveChanges();
        //    }
        //}

        ///// <summary>
        ///// Destroys existing products by deleting them from the database.
        ///// </summary>
        ///// <param name="products">The products deleted by the user</param>
        //public void Destroy(IEnumerable<ProductViewModel> products)
        //{
        //    using (var northwind = new Northwind())
        //    {
        //        //Iterate all destroyed products which are posted by the Kendo Grid
        //        foreach (var productViewModel in products)
        //        {
        //            var product = northwind.Products.FirstOrDefault(p => p.ProductID == productViewModel.ProductID);
        //            if (product != null)
        //            {
        //                northwind.Products.DeleteObject(product);
        //            }

        //        }

        //        // Delete the products from the database
        //        northwind.SaveChanges();
        //    }
        //}
    }
}